openapi: 3.0.0
info:
  title: Fake StackOverflow REST API
  version: 1.0.0
  description: |
    API for managing questions, answers, and tags of a fake stack overflow application.

    The API is organized into four main routes:
    * Tags route: Managing tags and their statistics
    * Questions route: Managing questions and their operations
    * Answers route: Managing answers to questions
    * Users route: Managing user authentication and registration

servers:
  - url: http://localhost:8000
    description: Development server for the Fake StackOverflow REST API.

tags:
  - name: Tags
    description: Operations related to tags
  - name: Questions
    description: Operations related to questions
  - name: Answers
    description: Operations related to answers
  - name: Users
    description: Operations related to user authentication and registration

paths:
  # User Controller Endpoints
  /user/login:
    post:
      tags:
        - Users
      summary: Authenticate a user with credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/signup:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Tags Controller Endpoints
  /tag/getTagsWithQuestionNumber:
    get:
      tags:
        - Tags
      summary: Get all tags with their question counts
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagCount"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Questions Controller Endpoints
  /question/addQuestion:
    post:
      tags:
        - Questions
      summary: Add a new question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddQuestionRequest"
      responses:
        "200":
          description: Question added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/getQuestionById/{qid}:
    get:
      tags:
        - Questions
      summary: Get question by ID
      parameters:
        - name: qid
          in: path
          required: true
          schema:
            type: string
            example: "679846196243c96505ba4007"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "400":
          $ref: "#/components/responses/BadRequest"
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question not found"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/getQuestion:
    get:
      tags:
        - Questions
      summary: Get filtered questions
      parameters:
        - name: order
          in: query
          required: false
          schema:
            type: string
            default: newest
            example: "newest"
          description: Order of questions (e.g., newest)
        - name: search
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: string
            example: Android studio [mobile]
          description: Search term to filter questions
          explode: true
          allowReserved: true
          x-express-openapi-validator:
            allowReservedCharacters: true

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
                minItems: 0
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/upvoteQuestion/{qid}:
    post:
      tags:
        - Questions
      summary: Upvote a question by ID
      parameters:
        - in: path
          name: qid
          required: true
          schema:
            type: string
            example: "679846196243c96505ba4007"
      responses:
        "200":
          description: Question upvoted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upvoted"
                  votes:
                    type: integer
                    example: 5
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question not found"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/addCommentToQuestion/{qid}:
    post:
      tags:
        - Questions
      summary: Add a comment to a question
      parameters:
        - name: qid
          in: path
          required: true
          description: The ID of the question to add a comment to
          schema:
            type: string
            example: "679846196243c96505ba4007"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: "This question is really helpful!"
                comment_by:
                  type: string
                  example: "john_doe"  # optional if handled server-side
      responses:
        "200":
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment added successfully"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question not found"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /question/getAIAnswer/{qid}:
    get:
      tags:
        - Questions
      summary: Get an AI answer for a question
      parameters:
        - name: qid
          in: path
          required: true
          schema:
            type: string
            example: "67d0e8e6f9512f1f28a74d93"
      responses:
        "200":
          description: AI answer retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: string
                    example: "This is an AI generated answer."
                  - type: object
                    properties:
                      answer:
                        type: string
                        example: "This is an AI generated answer."
        "400":
          $ref: "#/components/responses/BadRequest"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Too many AI requests from this IP, please try again after a minute.
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Answers Controller Endpoints
  /answer/addAnswer:
    post:
      tags:
        - Answers
      summary: Add a new answer to a question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAnswerRequest"
      responses:
        "200":
          description: Answer added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: Question not found
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  responses:
    BadRequest:
      description: Bad Request - Validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal Server Error"
    Unauthorized:
      description: Unauthorized - Invalid credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid credentials"
  schemas:
    Tag:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4007"
        name:
          type: string
          nullable: true
          example: "react"
        __v:
          type: integer
          example: 0

    TagCount:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "react"
        qcnt:
          type: integer
          example: 1

    Answer:
      type: object
      properties:
        _id:
          type: string
          example: "679d61405af1815cc9398a86"
        text:
          type: string
          example: You can solve your problem this way.
        ans_by:
          type: string
          example: user-name
        ans_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"
        __v:
          type: integer
          example: 0

    Question:
      type: object
      properties:
        _id:
          type: string
          example: 679846196243c96505ba4007
        title:
          type: string
          example: Question title
        text:
          type: string
          example: This explains the question further
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        answers:
          type: array
          items:
          # oneOf is used to allow both answer IDs and answer objects answers in a question
            oneOf:
              - type: string # For answer IDs
                example: "679846196243c96505ba4007"
              - $ref: "#/components/schemas/Answer"
                example: 
                  _id: "679d61405af1815cc9398a86"
                  text: "You can solve your problem this way."
                  ans_by: "user-name"
                  ans_date_time: "2025-02-02T00:28:19.406Z"
        comments:
          type: array
          description: Inline comments associated with the question
          items:
            type: object
            properties:
              text:
                type: string
                example: "This is a comment on the question."
              comment_by:
                type: string
                example: "user-name"
              comment_time:
                type: string
                format: date-time
                example: "2025-04-01T12:00:00.000Z"
        asked_by:
          type: string
          example: user-name
        ask_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"
        views:
          type: integer
          default: 0
          example: 0
        votes:
          type: integer
          default: 0
          example: 0
        __v:
          type: integer
          example: 0

    User:
      type: object
      properties:
        _id:
          type: string
          example: "679846196243c96505ba4008"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          example: "john@example.com"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "password123"

    SignupRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "password123"

    AuthResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AddAnswerRequest:
      type: object
      required:
        - qid
        - ans
      properties:
        qid:
          type: string
          example: "679846196243c96505ba4007"
        ans:
          type: object
          required:
            - text
            - ans_by
            - ans_date_time
          properties:
            text:
              type: string
              example: "It might be beneficial to do it this way."
            ans_by:
              type: string
              example: "user-name"
            ans_date_time:
              type: string
              format: date-time
              example: "2025-02-02T00:28:19.406Z"

    AddQuestionRequest:
      type: object
      required:
        - title
        - text
        - tags
        - asked_by
        - ask_date_time
      properties:
        title:
          type: string
          minLength: 1
          pattern: '^\s*\S+.*$' 
          example: What can I do to resolve this error?
        text:
          type: string
          minLength: 1
          pattern: '^\s*\S+.*$' 
          example: More context regarding the question
        tags:
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: object
            properties:
              name:
                type: string
            required:
              - name
        asked_by:
          minLength: 1
          pattern: '^\s*\S+.*$' 
          type: string
          example: "user-name"
        ask_date_time:
          type: string
          format: date-time
          example: "2025-02-02T00:28:19.406Z"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: ".body.name"
              message:
                type: string
                example: "must be string"
              errorCode:
                type: string
                example: "type.openapi.validation"
